// We need a function prime_bef_aft() that gives the largest prime below a certain given value n,

// befPrime or bef_prime (depending on the language),

// and the smallest prime larger than this value,

// aftPrime/aft_prime (depending on the language).

// The result should be output in a list like the following:

// primeBefAft == [befPrime, aftPrime]
// If n is a prime number it will give two primes, n will not be included in the result.

// Let's see some cases:

// primeBefAft(100) == [97, 101]

// primeBefAft(97) == [89, 101]

// primeBefAft(101) == [97, 103]

function primeBefAft(num) {
    
    var isPrime = num => {
      for(var i = 2, s= Math.sqrt(num); i <= s; i++){
        if(num % i === 0) return false;
      } return num > 1;
    }
 
    let upperPrime = num;
    let lowerPrime = num;
    let upperCount = 0;
    let lowerCount = 0
    
    //Increment from num to find first prime
    while(upperCount < 1){
       upperPrime++;
       if(isPrime(upperPrime) === true) upperCount++;
    }
    
    //Decrement from num to find first prime
    while(lowerCount < 1){
      lowerPrime--;
      if(isPrime(lowerPrime) === true) lowerCount++;
    }
    
    return [lowerPrime, upperPrime];
}
