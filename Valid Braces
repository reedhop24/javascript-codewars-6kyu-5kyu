// Write a function that takes a string of braces, and determines if the order of the braces is valid. It should return true if the string is valid, and false if it's invalid.

// This Kata is similar to the Valid Parentheses Kata, but introduces new characters: brackets [], and curly braces {}. Thanks to @arnedag for the idea!

// All input strings will be nonempty, and will only consist of parentheses, brackets and curly braces: ()[]{}.

// What is considered Valid?
// A string of braces is considered valid if all braces are matched with the correct brace.

function validBraces(braces){
  var regular = ["(",")"];
  var curly = ["{", "}"];
  var straight = ["[", "]"];
  var count = 0;
  var last = braces.length-1;
  for(var i = 0; i < braces.length; i++) {
    if(braces[i] == regular[0] && braces[i+1] == regular[1]){
      count++;
    }
    else if(braces[i] == regular[0] && braces[last] == regular[1]){
      count++;
    }
    else if(braces[i] == curly[0] && braces[i+1] == curly[1]){
      count++;
    }
    else if(braces[i] == curly[0] && braces[last] == curly[1]){
      count++;
    }
    else if(braces[i] == straight[0] && braces[i+1] == straight[1]){
      count++;
    }
    else if(braces[i] == straight[0] && braces[last] == straight[1]){
      count++;
    }
    last--;
}
if (count === braces.length/2){
  return true;
}
else{
  return false;
}
}
