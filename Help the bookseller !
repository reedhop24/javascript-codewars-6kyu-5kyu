// A bookseller has lots of books classified in 26 categories labeled A, B, ... Z. Each book has a code c of 3, 4, 5 or more capitals 
// letters. The 1st letter of a code is the capital letter of the book category. In the bookseller's stocklist each code c is followed by 
// a space and by a positive integer n (int n >= 0) which indicates the quantity of books of this code in stock.

// For example an extract of one of the stocklists could be:

// L = {"ABART 20", "CDXEF 50", "BKWRK 25", "BTSQZ 89", "DRTYM 60"}.
// or

// L = ["ABART 20", "CDXEF 50", "BKWRK 25", "BTSQZ 89", "DRTYM 60"] or ....
// You will be given a stocklist (e.g. : L) and a list of categories in capital letters e.g :

//   M = {"A", "B", "C", "W"} 
// or

//   M = ["A", "B", "C", "W"] or ...
// and your task is to find all the books of L with codes belonging to each category of M and to sum their quantity according to each 
// category.

// For the lists L and M of example you have to return the string (in Haskell/Clojure/Racket a list of pairs):

//  (A : 20) - (B : 114) - (C : 50) - (W : 0)

function stockList(listOfArt, listOfCat){
 //Initialize empty array to return
  var finalArr = [];
  if(listOfArt.length){
  
  //Traverse array of given letters
  for(var i = 0; i < listOfCat.length; i++) {
    var count = 0;
  
    //Traverse each code to see if match
    for(var j = 0; j < listOfArt.length; j++) {
      var code = listOfArt[j].split(' ');
      var beginningChar = code[0].split('');
      
      if(beginningChar[0] === listOfCat[i]) {
        count += parseInt(code[1]);
      }
      
    }
    
    finalArr.push(`(${listOfCat[i]} : ${count})`);
    
    }
  
  }
  
  return finalArr.join(' - ');

}
