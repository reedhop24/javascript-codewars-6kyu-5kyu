// The input is a string str of digits. Cut the string into chunks (a chunk here is a substring of the initial string) of size sz 
// (ignore the last chunk if its size is less than sz).

// If a chunk represents an integer such as the sum of the cubes of its digits is divisible by 2, reverse that chunk; otherwise rotate it 
// to the left by one position. Put together these modified chunks and return the result as a string.

// If

// sz is <= 0 or if str is empty return ""
// sz is greater (>) than the length of str it is impossible to take a chunk of size sz hence return "".

function revrot(str, sz) {
  if(str && sz && str.length >= sz) {
    let array = str.split('');
    let copied = [...array];
    const numOfChild = Math.ceil(copied.length / sz);
    const result = [];
    for (let i = 0; i < numOfChild; i++) {
      let x = copied.splice(0, sz);
      if(x.length === sz) {
        let int = x.map((l) => {return Math.pow(parseInt(l), 3)}).reduce((a, b) => {return a + b});
        if(int % 2 === 0) {
          result.push(x.reverse().join(''));
        } else {
          x.splice(x.length, 0, x[0]);
          x.splice(0, 1);
          result.push(x.join(''));
        }
      }
    }
    return result.join('');
  }
  return '';
}
