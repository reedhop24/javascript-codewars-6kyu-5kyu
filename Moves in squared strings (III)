// You are given a string of n lines, each substring being n characters long: For example:

// s = "abcd\nefgh\nijkl\nmnop"

// We will study some transformations of this square of strings.

// Symmetry with respect to the main diagonal: diag_1_sym (or diag1Sym or diag-1-sym)
// diag_1_sym(s) => "aeim\nbfjn\ncgko\ndhlp"
// Clockwise rotation 90 degrees: rot_90_clock (or rot90Clock or rot-90-clock)
// rot_90_clock(s) => "miea\nnjfb\nokgc\nplhd"
// selfie_and_diag1(s) (or selfieAndDiag1 or selfie-and-diag1) It is initial string + string obtained by symmetry with respect to the 
// main diagonal.
// s = "abcd\nefgh\nijkl\nmnop" --> 
// "abcd|aeim\nefgh|bfjn\nijkl|cgko\nmnop|dhlp"
// or printed for the last:
// selfie_and_diag1
// abcd|aeim
// efgh|bfjn
// ijkl|cgko 
// mnop|dhlp

function rot90Clock(strng) {
    let arr = diag1Sym(strng).split('\n');
    for(var i = 0; i < arr.length; i++) {
      arr[i] = arr[i].split('').reverse().join('');
    }
    return arr.join('\n');
}

function diag1Sym(strng) {
    let arr = strng.split('\n');
    let result = [];
    for(var i = 0; i < arr.length; i++) {
      let substring = '';
      for(var j = 0; j < arr.length; j++) {
        substring += arr[j][i];
      }
      result.push(substring);
    }
    return result.join('\n');
}

function selfieAndDiag1(strng) {
    let diag = diag1Sym(strng).split('\n');
    let arr = strng.split('\n');
    for(var i = 0; i < arr.length; i++) {
      arr[i] = arr[i] + '|' + diag[i];
    }
    return arr.join('\n');
}

function oper(fct, s) {
    return fct(s);
}
