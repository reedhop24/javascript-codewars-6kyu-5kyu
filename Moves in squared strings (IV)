// You are given a string of n lines, each substring being n characters long: For example:

// s = "abcd\nefgh\nijkl\nmnop"

// We will study some transformations of this square of strings.

// Symmetry with respect to the main cross diagonal: diag_2_sym (or diag2Sym or diag-2-sym)
// diag_2_sym(s) => "plhd\nokgc\nnjfb\nmiea"
// Counterclockwise rotation 90 degrees: rot_90_counter (or rot90Counter or rot-90-counter)
// rot_90_counter(s)=> "dhlp\ncgko\nbfjn\naeim"
// selfie_diag2_counterclock (or selfieDiag2Counterclock or selfie-diag2-counterclock) It is initial string + string obtained by 
// symmetry with respect to the main cross diagonal + counterclockwise rotation 90 degrees .
// s = "abcd\nefgh\nijkl\nmnop" --> 
// "abcd|plhd|dhlp\nefgh|okgc|cgko\nijkl|njfb|bfjn\nmnop|miea|aeim"
// or printed for the last:
// selfie_diag2_counterclock
// abcd|plhd|dhlp
// efgh|okgc|cgko
// ijkl|njfb|bfjn
// mnop|miea|aeim
// #Task:

// Write these functions diag_2_sym, rot_90_counter, selfie_diag2_counterclock
// and

// high-order function oper(fct, s) where

// fct is the function of one variable f to apply to the string s (fct will be one of diag_2_sym, rot_90_counter, selfie_diag2_counterclock)

function diag2Sym(strng) {
    let arr = strng.split('\n');
    let decrementor = arr.length - 1;
    let result = [];
    for(var i = arr.length-1; i >= 0; i--){
      let str = '';
      for(var j = arr.length-1; j >= 0; j--){
        str += arr[j][decrementor];
      }
      result.push(str);
      decrementor--;
    }
    return result.join('\n');
}
function rot90Counter(strng) {
    let arr = diag2Sym(strng).split('\n');
    for(var i = 0; i < arr.length; i++){
      arr[i] = arr[i].split('').reverse().join('');
    }
    return arr.join('\n');
}
function selfieDiag2Counterclock(strng) {
    let arr = strng.split('\n');
    let diag = diag2Sym(strng).split('\n');
    let rot = rot90Counter(strng).split('\n');
    for(var i = 0; i < arr.length; i++){
      arr[i] += '|' + diag[i] + '|' + rot[i];
    }
    return arr.join('\n');
}
function oper(fct, s) {
    return fct(s);
}
