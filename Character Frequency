// Write a function that takes a piece of text in the form of a string and returns the letter frequency count for the text. This count 
// excludes numbers, spaces and all punctuation marks. Upper and lower case versions of a character are equivalent and the result should 
// all be in lowercase.

// The function should return a list of tuples (in Python and Haskell) or arrays (in other languages) sorted by the most frequent letters 
// first. The Rust implementation should return an ordered BTreeMap. Letters with the same frequency are ordered alphabetically. For 
// example:

// letterFrequency('aaAabb dddDD hhcc')
// will return

//  [['d',5], ['a',4], ['b',2], ['c',2], ['h',2]]

function letterFrequency(text){

   //Function to sort via first paramater (number of occurences) and second parameter (numeric value)
   function Comparator(a, b) {
   if (a[1] == b[1]) {
    return a[0] < b[0] ? -1 : a[0] > b[0] ? 1 : 0;
   }
   return b[1] - a[1];
  }
  
  // Initialize result array, split text into array of ints and sort
  let empty = [];
  text = text.toLowerCase().split('').sort();
  let count = 1;
  
  // loop through array of letters keeping a count of number of occurences push that array into result array
  for(var i = 0; i < text.length; i++) {
   if(text[i].match(/^[A-Za-z]+$/)){
      if(text[i] === text[i+1]) {
      count++;
    } else if(text[i] !== text[i+1]) {
      empty.push([text[i], count]);
      count = 1;
    }
   }
  }
 
  return (empty.sort(Comparator));
  
}
