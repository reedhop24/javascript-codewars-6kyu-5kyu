// Backwards Read Primes are primes that when read backwards in base 10 (from right to left) are a different prime. (This rules out primes 
// which are palindromes.)

// Examples:
// 13 17 31 37 71 73 are Backwards Read Primes
// 13 is such because it's prime and read from right to left writes 31 which is prime too. Same for the others.

// Task
// Find all Backwards Read Primes between two positive given numbers (both inclusive), the second one always being greater than or equal 
// to the first one. The resulting array or the resulting string will be ordered following the natural order of the prime numbers.

function backwardsPrime(start, stop){
  const isPrime = x => {
    for(let i = 2, s = Math.sqrt(x); i <= s; i++)
        if(x % i === 0) return false; 
    return x > 1;
  }

  const reverse = num => parseFloat(num.toString().split('').reverse().join(''));
  var backwards = [];
  
  for(var i = start; i <= stop; i++) {
    if(i !== reverse(i)){
      if(isPrime(i) == true && isPrime(reverse(i)) == true) {
        backwards.push(i);
      }
    }
  }
  
  return backwards;
}
